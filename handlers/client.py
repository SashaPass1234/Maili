from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot
from data_base import sqlite_db
from keyboards.all_kb import keyboard1, keyboard2, keyboard3, keyboard4, keyboard5


photo = open('img/vid.png', 'rb')


TEXT = '''üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞ Maili! üåü

–ú—ã ‚Äî –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –º–æ–¥—ã –∏–∑ –ö–∏—Ç–∞—è! üöÄ –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å –ª—é–±–æ–≤—å—é –æ—Ç–±–∏—Ä–∞–µ—Ç —Å–∞–º—ã–µ —Å—Ç–∏–ª—å–Ω—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—â–∏, —á—Ç–æ–±—ã –≤—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –Ω–∞ –ø–∏–∫–µ —Ç—Ä–µ–Ω–¥–æ–≤. 

‚ú® –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:

‚Ä¢ üì¶ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –º–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä—è–º–æ –∫ –≤–∞—à–µ–π –¥–≤–µ—Ä–∏!

‚Ä¢ üëó –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç: –æ—Ç –æ–¥–µ–∂–¥—ã –¥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤!

‚Ä¢ üí∞ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏!

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö, —ç–∫—Å–∫–ª—é–∑–∏–≤–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö! –í–∞—à —Å—Ç–∏–ª—å ‚Äî –Ω–∞—à–∞ –∑–∞–±–æ—Ç–∞! üíñ

#Maili #–ú–æ–¥–∞–ò–∑–ö–∏—Ç–∞—è #–ë—ã—Å—Ç—Ä–∞—è–î–æ—Å—Ç–∞–≤–∫–∞ #–°—Ç–∏–ª—å–ö–∞–∂–¥—ã–π–î–µ–Ω—å

–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:
@wxhzx
@qwerty_txx
'''


################################################# START #################################################
async def start(message: types.Message):
    await message.reply(TEXT, reply_markup=keyboard1)


################################################# CALLBACK #################################################
async def process_callback_button_tovar(callback_query: types.CallbackQuery):
    await bot.send_photo(callback_query.from_user.id, photo, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞:', reply_markup=keyboard2)


async def process_callback_button_support(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞')


################################################# –ü–û–ò–°–ö –û–î–ï–ñ–î–´ #################################################
class FSMAdmin(StatesGroup):
    clot_message = State()
    acses_message = State()
    obyv_message = State()

async def process_callback_clot(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–¥–µ–∂–¥—ã:")
    await FSMAdmin.clot_message.set()


async def input_clot(message: types.Message, state):
    async with state.proxy() as data:
        data['clot_message'] = message.text

    await state.finish()

    text = data['clot_message']

    sqlite_db.cur.execute('SELECT img, name, size, ids, quantity FROM clot WHERE name = ?', (text,))
    result = sqlite_db.cur.fetchmany(6)

    if result:
        for value in result:
            global ids1
            ids1 = value[3]
            await bot.send_photo(message.from_user.id, value[0],
                                 f'–ù–∞–∑–≤–∞–Ω–∏–µ: {value[1]}\n–†–∞–∑–º–µ—Ä: {value[2]}\n–ê–π–¥–∏: {value[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {value[4]}', reply_markup=keyboard3)
    else:
        response = f'–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
        await message.answer(response)


################################################# –ü–û–ò–°–ö –ê–ö–°–ï–°–°–£–ê–†–ê #################################################
async def process_callback_acses(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞:")
    await FSMAdmin.acses_message.set()


async def input_acses(message: types.Message, state):
    async with state.proxy() as data:
        data['acses_message'] = message.text

    await state.finish()

    text = data['acses_message']

    sqlite_db.cur.execute('SELECT img, name, size, ids, quantity FROM acses WHERE name = ?', (text,))
    result = sqlite_db.cur.fetchmany(6)

    if result:
        for value in result:
            global ids2
            ids2 = value[3]
            await bot.send_photo(message.from_user.id, value[0],
                                 f'–ù–∞–∑–≤–∞–Ω–∏–µ: {value[1]}\n–†–∞–∑–º–µ—Ä: {value[2]}\n–ê–π–¥–∏: {value[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {value[4]}', reply_markup=keyboard4)
    else:
        response = f'–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
        await message.answer(response)


################################################# –ü–û–ò–°–ö –û–ë–£–í–ò #################################################
async def process_callback_obyv(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—É–≤–∏:")
    await FSMAdmin.obyv_message.set()


async def input_obyv(message: types.Message, state):
    async with state.proxy() as data:
        data['obyv_message'] = message.text

    await state.finish()

    text = data['obyv_message']

    sqlite_db.cur.execute('SELECT img, name, size, ids, quantity FROM obyv WHERE name = ?', (text,))
    result = sqlite_db.cur.fetchmany(6)

    if result:
        for value in result:
            global ids3
            ids3 = value[3]
            await bot.send_photo(message.from_user.id, value[0],
                                 f'–ù–∞–∑–≤–∞–Ω–∏–µ: {value[1]}\n–†–∞–∑–º–µ—Ä: {value[2]}\n–ê–π–¥–∏: {value[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {value[4]}', reply_markup=keyboard5)
    else:
        response = f'–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
        await message.answer(response)

################################################# –ó–ê–ö–ê–ó–´ #################################################
TEXT_ZAKAZA = '''
–û–ø–ª–∞—Ç–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑–∞ **** **** **** ****

–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: "–û–ñ–ò–î–ê–ù–ò–ï –û–ü–õ–ê–¢–´ –ó–ê–ö–ê–ó–ê"!
'''

async def process_callback_button_zakaz_clot(callback_query: types.CallbackQuery):
    global user
    user = callback_query.from_user.username
    # global ids1
    sqlite_db.cur.execute('SELECT img, name, size, quantity, ids FROM clot WHERE ids = ?', (ids1,))
    result = sqlite_db.cur.fetchmany(5)
    status_check = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"
    group_id = -1002210462273
    for values in result:
        sqlite_db.cur.execute('INSERT INTO zakazy (user, img, name, size, ids, quantity, check_status) VALUES (?, ?, ?, ?, ?, ?, ?)',
                              (user, values[0], values[1], values[2], values[3], values[4], status_check))
        sqlite_db.base.commit()
        await bot.send_photo(group_id, values[0], f'–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –•–û–ß–ï–¢ –ö–£–ü–ò–¢–¨ –£ –í–ê–° –¢–û–í–ê–†: @{user}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {values[1]}\n–†–∞–∑–º–µ—Ä: {values[2]}\n–ê–π–¥–∏: {values[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {values[4]}\n–°—Ç–∞—Ç—É—Å: {status_check.upper()}')
    await bot.send_message(callback_query.from_user.id, TEXT_ZAKAZA)

async def process_callback_button_zakaz_acses(callback_query: types.CallbackQuery):
    global user
    user = callback_query.from_user.username
    global ids2
    sqlite_db.cur.execute('SELECT img, name, size, quantity, ids FROM acses WHERE ids = ?', (ids2,))
    result = sqlite_db.cur.fetchmany(5)
    status_check = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"
    group_id = -1002210462273
    for values in result:
        sqlite_db.cur.execute('INSERT INTO zakazy (user, img, name, size, ids, quantity, check_status) VALUES (?, ?, ?, ?, ?, ?, ?)',
                              (user, values[0], values[1], values[2], values[3], values[4], status_check))
        sqlite_db.base.commit()
        await bot.send_photo(group_id, values[0], f'–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –•–û–ß–ï–¢ –ö–£–ü–ò–¢–¨ –£ –í–ê–° –¢–û–í–ê–†: @{user}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {values[1]}\n–†–∞–∑–º–µ—Ä: {values[2]}\n–ê–π–¥–∏: {values[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {values[4]}\n–°—Ç–∞—Ç—É—Å: {status_check.upper()}')
    await bot.send_message(callback_query.from_user.id, TEXT_ZAKAZA)

async def process_callback_button_zakaz_obyv(callback_query: types.CallbackQuery):
    global user
    user = callback_query.from_user.username
    global ids3
    sqlite_db.cur.execute('SELECT img, name, size, ids, quantity FROM obyv WHERE ids = ?', (ids3,))
    result = sqlite_db.cur.fetchmany(7)
    status_check = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"
    group_id = -1002210462273
    for values in result:
        sqlite_db.cur.execute('INSERT INTO zakazy (user, img, name, size, ids, quantity, check_status) VALUES (?, ?, ?, ?, ?, ?, ?)',
                              (user, values[0], values[1], values[2], values[3], values[4], status_check))
        sqlite_db.base.commit()
        await bot.send_photo(group_id, values[0], f'–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –•–û–ß–ï–¢ –ö–£–ü–ò–¢–¨ –£ –í–ê–° –¢–û–í–ê–†: @{user}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {values[1]}\n–†–∞–∑–º–µ—Ä: {values[2]}\n–ê–π–¥–∏: {values[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {values[4]}\n–°—Ç–∞—Ç—É—Å: {status_check.upper()}')
    await bot.send_message(callback_query.from_user.id, TEXT_ZAKAZA)

async def my_zakazy(message: types.Message):
    user = message.from_user.username
    for value in sqlite_db.cur.execute('SELECT img, name, size, ids, quantity, check_status FROM zakazy WHERE user = ?', (user,)).fetchmany(7):
        await bot.send_photo(message.from_user.id, value[0], f'–ù–∞–∑–≤–∞–Ω–∏–µ: {value[1]}\n–†–∞–∑–º–µ—Ä: {value[2]}\n–ê–π–¥–∏: {value[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {value[4]}\n–°—Ç–∞—Ç—É—Å: {value[5].upper()}')


############################################################# ALL FUCTION #############################################################
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])

    dp.register_callback_query_handler(process_callback_button_tovar, lambda query: query.data == 'tovar')
    dp.register_callback_query_handler(process_callback_button_support, lambda query: query.data == 'support')

    dp.register_callback_query_handler(process_callback_clot, lambda query: query.data == 'clot')
    dp.register_message_handler(input_clot, state=FSMAdmin.clot_message)

    dp.register_callback_query_handler(process_callback_acses, lambda query: query.data == 'acses')
    dp.register_message_handler(input_acses, state=FSMAdmin.acses_message)

    dp.register_callback_query_handler(process_callback_obyv, lambda query: query.data == 'obyv')
    dp.register_message_handler(input_obyv, state=FSMAdmin.obyv_message)

    dp.register_callback_query_handler(process_callback_button_zakaz_clot, lambda query: query.data == 'zakaz_clot')
    dp.register_callback_query_handler(process_callback_button_zakaz_acses, lambda query: query.data == 'zakaz_acses')
    dp.register_callback_query_handler(process_callback_button_zakaz_obyv, lambda query: query.data == 'zakaz_obyv')

    dp.register_message_handler(my_zakazy, commands=['–ú–æ–∏–ó–∞–∫–∞–∑—ã'])

